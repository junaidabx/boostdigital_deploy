
# -*- coding: utf-8 -*-
"""index_constituents.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IMI_AvYifEshSUdr9oKPpp0pt0tjb5s8
"""

# from google.colab import drive
# drive.mount('/content/drive')

import yfinance as yf
import sqlite3
import datetime
import json
import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import psycopg2
from sqlalchemy import create_engine, text
# import matplotlib.pyplot as plt
# from Symbols import nasdaq_symbols, SP_Symbols, DOWjones_symbols

sp500_symbols = ['AAPL', 'MSFT', 'AMZN', 'NVDA', 'GOOGL', 'BRK.B', 'GOOG', 'TSLA', 'META', 'UNH', 'XOM', 'JNJ', 'JPM', 'V', 'PG', 'MA', 'HD', 'CVX', 'ABBV', 'MRK', 'LLY', 'AVGO', 'PEP', 'KO', 'PFE', 'TMO', 'COST', 'CSCO', 'MCD', 'WMT', 'BAC', 'CRM', 'DIS', 'ACN', 'LIN', 'ADBE', 'ABT', 'DHR', 'TXN', 'VZ', 'CMCSA', 'AMD', 'NEE', 'NKE', 'PM', 'BMY', 'NFLX', 'RTX', 'WFC', 'ORCL', 'UPS', 'QCOM', 'T', 'AMGN', 'HON', 'INTC', 'UNP', 'COP', 'INTU', 'IBM', 'BA', 'LOW', 'CAT', 'SBUX', 'MS', 'SPGI', 'ELV', 'GS', 'PLD', 'LMT', 'DE', 'MDT', 'GE', 'GILD', 'BKNG', 'AMAT', 'BLK', 'AXP', 'MDLZ', 'CVS', 'SYK', 'ADI', 'AMT', 'REGN', 'ADP', 'TJX', 'C', 'ISRG', 'NOW', 'TMUS', 'PGR', 'PYPL', 'SCHW', 'VRTX', 'MMC', 'MO', 'CB', 'ZTS', 'CI', 'SO', 'TGT', 'DUK', 'FISV', 'BSX', 'BDX', 'SLB', 'CME', 'NOC', 'ETN', 'LRCX', 'ITW', 'EOG', 'MU', 'AON', 'EQIX', 'CL', 'CSX', 'APD', 'HUM', 'ATVI', 'MPC', 'WM', 'SNPS', 'MMM', 'CDNS', 'EL', 'ICE', 'CCI', 'FCX', 'HCA', 'VLO', 'ORLY', 'KLAC', 'FDX', 'PNC', 'GD', 'GIS', 'SHW', 'EW', 'USB', 'MCK', 'MRNA', 'EMR', 'GM', 'PXD', 'NSC', 'DG', 'APH', 'MCO', 'PSX', 'ROP', 'CMG', 'SRE', 'MSI', 'AEP', 'D', 'F', 'OXY', 'AZO', 'NXPI', 'PSA', 'KMB', 'TFC', 'DXCM', 'MSCI', 'ADM', 'MAR', 'MCHP', 'ADSK', 'PH', 'TT', 'FTNT', 'CTVA', 'EXC', 'IDXX', 'JCI', 'ANET', 'ECL', 'TEL', 'AJG', 'MNST', 'A', 'BIIB', 'SYY', 'NEM', 'TRV', 'CTAS', 'O', 'NUE', 'CARR', 'PCAR', 'TDG', 'DOW', 'HSY', 'LHX', 'MET', 'CHTR', 'YUM', 'HES', 'AFL', 'ROST', 'XEL', 'STZ', 'HLT', 'AIG', 'IQV', 'WMB', 'PAYX', 'COF', 'CNC', 'OTIS', 'SPG', 'KMI', 'ILMN', 'ED', 'ON', 'MTD', 'WELL', 'CMI', 'AME', 'BK', 'WBD', 'DD', 'ROK', 'KR', 'AMP', 'VICI', 'DVN', 'CPRT', 'RMD', 'EA', 'GWW', 'KHC', 'CTSH', 'FAST', 'ODFL', 'FIS', 'DHI', 'PEG', 'DLTR', 'KDP', 'PPG', 'WEC', 'VRSK', 'APTV', 'PRU', 'HAL', 'ALL', 'GEHC', 'KEYS', 'ANSS', 'BKR', 'CSGP', 'AWK', 'OKE', 'ULTA', 'SBAC', 'RSG', 'ES', 'ZBH', 'ENPH', 'GPN', 'EIX', 'DLR', 'URI', 'LEN', 'STT', 'ABC', 'GLW', 'ALB', 'TSCO', 'PCG', 'CDW', 'WST', 'DFS', 'WTW', 'IT', 'ACGL', 'CEG', 'TROW', 'WBA', 'FANG', 'EFX', 'HPQ', 'FTV', 'PWR', 'EBAY', 'LYB', 'GPC', 'IFF', 'IR', 'VMC', 'ALGN', 'AVB', 'AEE', 'PODD', 'CBRE', 'MLM', 'ETR', 'HIG', 'MPWR', 'CHD', 'WY', 'FE', 'DAL', 'FSLR', 'DTE', 'MKC', 'EXR', 'DOV', 'MTB', 'BAX', 'TDY', 'PPL', 'HOLX', 'LH', 'CLX', 'HPE', 'EQR', 'CAH', 'CTRA', 'VRSN', 'DRI', 'ARE', 'STE', 'TTWO', 'LUV', 'STLD', 'SWKS', 'OMC', 'FITB', 'CNP', 'XYL', 'NDAQ', 'WAT', 'LVS', 'WAB', 'NTRS', 'RJF', 'CAG', 'CMS', 'COO', 'VTR', 'RF', 'CINF', 'FICO', 'INVH', 'K', 'TSN', 'SJM', 'IEX', 'EXPD', 'BALL', 'MAA', 'BR', 'AMCR', 'PFG', 'NVR', 'TER', 'PKI', 'EPAM', 'HBAN', 'TRGP', 'DGX', 'ATO', 'SEDG', 'MOH', 'FDS', 'AES', 'HWM', 'CFG', 'FMC', 'ZBRA', 'FLT', 'GRMN', 'MOS', 'MRO', 'BBY', 'J', 'TXT', 'IRM', 'LW', 'BG', 'MKTX', 'JBHT', 'AVY', 'LKQ', 'RE', 'CBOE', 'UAL', 'EXPE', 'CF', 'TYL', 'IPG', 'EVRG', 'RCL', 'MGM', 'PAYC', 'NTAP', 'PHM', 'ETSY', 'PTC', 'BRO', 'LNT', 'INCY', 'ESS', 'POOL', 'SNA', 'PKG', 'IP', 'WRB', 'TRMB', 'LDOS', 'SYF', 'AKAM', 'CTLT', 'STX', 'UDR', 'APA', 'DPZ', 'VTRS', 'TFX', 'KEY', 'NDSN', 'PEAK', 'CHRW', 'BF.B', 'BWA', 'HRL', 'SWK', 'TECH', 'EQT', 'WYNN', 'KIM', 'CPT', 'WDC', 'MTCH', 'CPB', 'NI', 'HST', 'JKHY', 'L', 'HSIC', 'MAS', 'PARA', 'JNPR', 'CDAY', 'CE', 'TPR', 'QRVO', 'FOXA', 'BIO', 'GL', 'EMN', 'CRL', 'TAP', 'LYV', 'GEN', 'KMX', 'CCL', 'CZR', 'ALLE', 'AAL', 'REG', 'PNR', 'AOS', 'PNW', 'BBWI', 'ROL', 'RHI', 'FFIV', 'HII', 'XRAY', 'UHS', 'NRG', 'BEN', 'WRK', 'BXP', 'IVZ', 'VFC', 'AAP', 'WHR', 'GNRC', 'FRT', 'SEE', 'NWSA', 'HAS', 'AIZ', 'CMA', 'OGN', 'DXC', 'NCLH', 'MHK', 'ALK', 'RL', 'ZION', 'NWL', 'DVA', 'FOX', 'LNC', 'FRC', 'DISH', 'NWS']
nasdaq_symbols = ['ATVI', 'ADBE', 'ADP', 'ABNB', 'ALGN', 'GOOGL', 'GOOG', 'AMZN', 'AMD', 'AEP', 'AMGN', 'ADI', 'ANSS', 'AAPL', 'AMAT', 'ASML', 'AZN', 'TEAM', 'ADSK', 'BKR', 'BIIB', 'BKNG', 'AVGO', 'CDNS', 'CHTR', 'CTAS', 'CSCO', 'CTSH', 'CMCSA', 'CEG', 'CPRT', 'CSGP', 'COST', 'CRWD', 'CSX', 'DDOG', 'DXCM', 'FANG', 'DLTR', 'EBAY', 'EA', 'ENPH', 'EXC', 'FAST', 'FISV', 'FTNT', 'GILD', 'GFS', 'HON', 'IDXX', 'ILMN', 'INTC', 'INTU', 'ISRG', 'JD', 'KDP', 'KLAC', 'KHC', 'LRCX', 'LCID', 'LULU', 'MAR', 'MRVL', 'MELI', 'META', 'MCHP', 'MU', 'MSFT', 'MRNA', 'MDLZ', 'MNST', 'NFLX', 'NVDA', 'NXPI', 'ORLY', 'ODFL', 'PCAR', 'PANW', 'PAYX', 'PYPL', 'PDD', 'PEP', 'QCOM', 'REGN', 'RIVN', 'ROST', 'SGEN', 'SIRI', 'SBUX', 'SNPS', 'TMUS', 'TSLA', 'TXN', 'VRSK', 'VRTX', 'WBA', 'WBD', 'WDAY', 'XEL', 'ZM', 'ZS']
dj_symbols = ['UNH', 'GS', 'HD', 'MCD', 'MSFT', 'AMGN', 'V', 'CAT', 'BA', 'CRM', 'HON', 'TRV', 'CVX', 'AXP', 'AAPL', 'JNJ', 'PG', 'WMT', 'IBM', 'JPM', 'NKE', 'MRK', 'MMM', 'DIS', 'KO', 'DOW', 'CSCO', 'VZ', 'WBA', 'INTC']

current_conxt_sp500 = sp500_symbols
current_conxt_nasdaq = nasdaq_symbols
current_conxt_dj = dj_symbols

def load_historical_changes(file_name):
    with open(file_name, 'r') as f:
        historical_changes = json.load(f)
    df_hist = pd.DataFrame(historical_changes)
    df_hist = df_hist.set_index(pd.to_datetime(df_hist['date']))
    df_hist = df_hist.drop(['date', 'dateAdded', 'reason'], axis=1)
    return df_hist

url_nasdaq = 'historical_changes_nasdaq.json'
url_sp500 = 'historical_changes_sp500.json'
url_dj = 'historical_changes_dj.json'

df_hist_nasdaq = load_historical_changes(url_nasdaq)
df_hist_sp500 = load_historical_changes(url_sp500)
df_hist_dj = load_historical_changes(url_dj)

# df_hist_nasdaq

def apply_changes_to_index_constituents(check_date, df, index_constituents):
    # Loop through each row of the DataFrame
    for date, row in df.iterrows():
        added_security = row['addedSecurity']
        removed_ticker = row['removedTicker']
        removed_security = row['removedSecurity']
        symbol = row['symbol']
        
        # if the change date is after the check date, break the loop
        if date < check_date:
            continue
        
        # if the change date is the check date or later, apply the changes to the index constituents list
        if added_security:
            if date == check_date and symbol not in index_constituents:
                index_constituents.append(symbol)
        
            
        if removed_ticker:
            if date == check_date and removed_ticker in index_constituents:
                index_constituents.remove(removed_ticker)
        
        # if a ticker was added on this date, add the corresponding security to the index_constituents list
        if added_security and date > check_date:
            if symbol in index_constituents:
                index_constituents.remove(symbol)
        
        # if a ticker was removed on this date, remove the corresponding security from the index_constituents list
        if removed_ticker and date > check_date:
            if removed_ticker not in index_constituents:
                index_constituents.append(removed_ticker)

    return index_constituents

def get_relevant(df, c_constituents, check_date):
    """
    Returns the constituents of an index at a specific date.
    :param df: a Pandas DataFrame containing the index constituents and their effective dates
    :param check_date: the date at which to return the index constituents
    :return: a list of the index constituents at the given date
    """
    index_constituents = list(c_constituents)
    
    # Check if check_date is in the index
    if check_date in df.index:
        # Get all rows of the DataFrame up to and including the check_date
        rows = df.loc[:check_date]
        index_constituents = apply_changes_to_index_constituents(check_date, rows, index_constituents)
    else:
        # Find the prior date
        prior_date = df.loc[df.index < check_date].index.max()
        # Get all rows of the DataFrame for the prior date
        rows = df.loc[:prior_date]
        index_constituents = apply_changes_to_index_constituents(prior_date, rows, index_constituents)
  
    return index_constituents


# def store_data(tickers, index):
#     # Connect to the database
#     conn = sqlite3.connect('stock_data.db')
#     c = conn.cursor()

#     # Loop through the tickers and download the price data
#     for ticker in tickers:
#         data = yf.download(ticker, start='1997-01-01')

#         # Extract the relevant columns
#         data = data[['Adj Close']]
#         # Reset the index and rename the columns
#         data.reset_index(inplace=True)
#         data = data.rename(columns={'Adj Close': 'adj_close'})
#         data['ticker'] = ticker

#         # Insert the data into the database
#         data.to_sql(f'{index}_data', conn, if_exists='append', index=False)

#     # Commit the changes to the database and close the connection
#     conn.commit()
#     conn.close()


@st.cache_data
def retrieve_data(index, start_date, end_date):
    # Create the connection string
    conn_string = f"postgresql://postgres:paxxcode7890@192.168.1.109/stock_data"

    # Connect to the database using SQLAlchemy
    engine = create_engine(conn_string)
    conn = engine.connect()
    
    # Query the data from the database
    query = text(f"SELECT date, ticker, adj_close FROM {index}_data WHERE date BETWEEN :start_date AND :end_date")
    data = pd.read_sql_query(query, conn, params={"start_date": start_date, "end_date": end_date})


    # Set the date column as the index
    data.set_index('date', inplace=True)
    data.index = pd.to_datetime(data.index)

    # Pivot the table to have tickers as columns and adj_close as values
    data = data.pivot(columns='ticker', values='adj_close')

    data = data.dropna(axis=1, how='all')

    # Close the connection
    conn.close()

    return data



@st.cache_data
def get_returns(timeframe, df, hist_change, c_constituents, n=10):
    df.index = pd.to_datetime(df.index)  # ensure index is a valid DatetimeIndex
    if timeframe == 'M':
        ret = (df.pct_change()+1).resample('M').prod()
    elif timeframe == 'Q':
        ret = (df.pct_change()+1).resample('Q').prod()
    elif timeframe == 'Y':
        ret = (df.pct_change()+1).resample('Y').prod()
    else:
        return 'Invalid timeframe'

    returns = []
    top_list = []
    for date in ret.index[:-1]:
        index_constituents = get_relevant(hist_change, c_constituents, date)
        valid_stocks = [s for s in index_constituents if s in ret.columns]
        top_n = get_top_n(date, ret[valid_stocks], n)
        portfolio = ret.loc[date:, top_n][1:2]
        top_list.append(", ".join(top_n))
        returns.append(pf_performance(date, ret[valid_stocks], n))


    returns_series = pd.Series(returns, index=ret.index[1:])
    top_list_series = pd.Series(top_list, index=ret.index[1:])
    df = pd.DataFrame({'Top Stocks': top_list_series, 'Returns': returns_series})

    return df, returns_series

def get_top_n(date, ret, n):
    """
    Returns the top N stocks for a given date based on returns data.

    Parameters:
    date (Timestamp): Date for which to retrieve top N stocks.
    returns (DataFrame): DataFrame of returns data.
    n (int): Number of top stocks to return.

    Returns:
    list: List of top N stocks.
    """
    top_n = ret.loc[date].nlargest(n).index
    # top_n_list = {date: list(top_n)}
    return top_n

def pf_performance(date, ret, n):
    top_n = get_top_n(date, ret, n)
    portfolio = ret.loc[date:, top_n][1:2]
    # if portfolio.isna().sum().sum() > 0:
    #     return np.nan
    return portfolio.mean(axis=1).values[0]

def plot_cumulative_returns(returns, tf, index_name):
    if tf == 'M':
        color = 'blue'
    elif tf == 'Q':
        color = 'green'
    elif tf == 'Y':
        color = 'orange'

    cum_ret = returns.cumprod()
    st.write(f"Cumulative Returns of {index_name} ({tf}-frequency) are <span style='font-size:24px; color:green'>{round(cum_ret[-1],2)}x</span>", unsafe_allow_html=True)
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=cum_ret.index, y=cum_ret.values, line=dict(color=color), name='Cumulative Returns'))
    fig.update_layout(title=f"Cumulative Returns of {index_name} ({tf}-frequency)", title_font_size=16, plot_bgcolor='white')
    fig.update_xaxes(title_text="Date", title_font=dict(size=14))
    fig.update_yaxes(title_text="Cumulative Return", title_font=dict(size=14))
    st.plotly_chart(fig)
    return fig



# assuming `df` is your pandas DataFrame as shown in the question
check_date = pd.to_datetime('1997-12-02')  # or whatever your check date is

# constituents = get_relevant(df_hist, check_date)

# print(constituents)
# len(constituents)

#@title Code to GET all tickers of any index
# index_constituents = list(current_conxt_dj)

# # Loop through each row of the DataFrame
# for date, row in df_hist_dj.iterrows():
#     added_security = row['addedSecurity']
#     removed_ticker = row['removedTicker']
#     removed_security = row['removedSecurity']
#     symbol = row['symbol']
#     date_str = date.strftime('%Y-%m-%d')
#     # if the change date is after the check date, break the loop
#     if date < check_date:
#         continue
    
#     # if the change date is the check date or later, apply the changes to the index constituents list
#     if added_security:
#         if symbol in index_constituents:
#             print(f"{symbol} added on {date_str} already in List")
#         else:
#             print(f"{symbol} added on {date_str}")
#         if date > check_date and symbol not in index_constituents:
#             index_constituents.append(symbol)

# print(index_constituents)
# len(index_constituents)

sp500_all = ['AAPL', 'MSFT', 'AMZN', 'NVDA', 'GOOGL', 'BRK.B', 'GOOG', 'TSLA', 'META', 'UNH', 'XOM', 'JNJ', 'JPM', 'V', 'PG', 'MA', 'HD', 'CVX', 'ABBV', 'MRK', 'LLY', 'AVGO', 'PEP', 'KO', 'PFE', 'TMO', 'COST', 'CSCO', 'MCD', 'WMT', 'BAC', 'CRM', 'DIS', 'ACN', 'LIN', 'ADBE', 'ABT', 'DHR', 'TXN', 'VZ', 'CMCSA', 'AMD', 'NEE', 'NKE', 'PM', 'BMY', 'NFLX', 'RTX', 'WFC', 'ORCL', 'UPS', 'QCOM', 'T', 'AMGN', 'HON', 'INTC', 'UNP', 'COP', 'INTU', 'IBM', 'BA', 'LOW', 'CAT', 'SBUX', 'MS', 'SPGI', 'ELV', 'GS', 'PLD', 'LMT', 'DE', 'MDT', 'GE', 'GILD', 'BKNG', 'AMAT', 'BLK', 'AXP', 'MDLZ', 'CVS', 'SYK', 'ADI', 'AMT', 'REGN', 'ADP', 'TJX', 'C', 'ISRG', 'NOW', 'TMUS', 'PGR', 'PYPL', 'SCHW', 'VRTX', 'MMC', 'MO', 'CB', 'ZTS', 'CI', 'SO', 'TGT', 'DUK', 'FISV', 'BSX', 'BDX', 'SLB', 'CME', 'NOC', 'ETN', 'LRCX', 'ITW', 'EOG', 'MU', 'AON', 'EQIX', 'CL', 'CSX', 'APD', 'HUM', 'ATVI', 'MPC', 'WM', 'SNPS', 'MMM', 'CDNS', 'EL', 'ICE', 'CCI', 'FCX', 'HCA', 'VLO', 'ORLY', 'KLAC', 'FDX', 'PNC', 'GD', 'GIS', 'SHW', 'EW', 'USB', 'MCK', 'MRNA', 'EMR', 'GM', 'PXD', 'NSC', 'DG', 'APH', 'MCO', 'PSX', 'ROP', 'CMG', 'SRE', 'MSI', 'AEP', 'D', 'F', 'OXY', 'AZO', 'NXPI', 'PSA', 'KMB', 'TFC', 'DXCM', 'MSCI', 'ADM', 'MAR', 'MCHP', 'ADSK', 'PH', 'TT', 'FTNT', 'CTVA', 'EXC', 'IDXX', 'JCI', 'ANET', 'ECL', 'TEL', 'AJG', 'MNST', 'A', 'BIIB', 'SYY', 'NEM', 'TRV', 'CTAS', 'O', 'NUE', 'CARR', 'PCAR', 'TDG', 'DOW', 'HSY', 'LHX', 'MET', 'CHTR', 'YUM', 'HES', 'AFL', 'ROST', 'XEL', 'STZ', 'HLT', 'AIG', 'IQV', 'WMB', 'PAYX', 'COF', 'CNC', 'OTIS', 'SPG', 'KMI', 'ILMN', 'ED', 'ON', 'MTD', 'WELL', 'CMI', 'AME', 'BK', 'WBD', 'DD', 'ROK', 'KR', 'AMP', 'VICI', 'DVN', 'CPRT', 'RMD', 'EA', 'GWW', 'KHC', 'CTSH', 'FAST', 'ODFL', 'FIS', 'DHI', 'PEG', 'DLTR', 'KDP', 'PPG', 'WEC', 'VRSK', 'APTV', 'PRU', 'HAL', 'ALL', 'GEHC', 'KEYS', 'ANSS', 'BKR', 'CSGP', 'AWK', 'OKE', 'ULTA', 'SBAC', 'RSG', 'ES', 'ZBH', 'ENPH', 'GPN', 'EIX', 'DLR', 'URI', 'LEN', 'STT', 'ABC', 'GLW', 'ALB', 'TSCO', 'PCG', 'CDW', 'WST', 'DFS', 'WTW', 'IT', 'ACGL', 'CEG', 'TROW', 'WBA', 'FANG', 'EFX', 'HPQ', 'FTV', 'PWR', 'EBAY', 'LYB', 'GPC', 'IFF', 'IR', 'VMC', 'ALGN', 'AVB', 'AEE', 'PODD', 'CBRE', 'MLM', 'ETR', 'HIG', 'MPWR', 'CHD', 'WY', 'FE', 'DAL', 'FSLR', 'DTE', 'MKC', 'EXR', 'DOV', 'MTB', 'BAX', 'TDY', 'PPL', 'HOLX', 'LH', 'CLX', 'HPE', 'EQR', 'CAH', 'CTRA', 'VRSN', 'DRI', 'ARE', 'STE', 'TTWO', 'LUV', 'STLD', 'SWKS', 'OMC', 'FITB', 'CNP', 'XYL', 'NDAQ', 'WAT', 'LVS', 'WAB', 'NTRS', 'RJF', 'CAG', 'CMS', 'COO', 'VTR', 'RF', 'CINF', 'FICO', 'INVH', 'K', 'TSN', 'SJM', 'IEX', 'EXPD', 'BALL', 'MAA', 'BR', 'AMCR', 'PFG', 'NVR', 'TER', 'PKI', 'EPAM', 'HBAN', 'TRGP', 'DGX', 'ATO', 'SEDG', 'MOH', 'FDS', 'AES', 'HWM', 'CFG', 'FMC', 'ZBRA', 'FLT', 'GRMN', 'MOS', 'MRO', 'BBY', 'J', 'TXT', 'IRM', 'LW', 'BG', 'MKTX', 'JBHT', 'AVY', 'LKQ', 'RE', 'CBOE', 'UAL', 'EXPE', 'CF', 'TYL', 'IPG', 'EVRG', 'RCL', 'MGM', 'PAYC', 'NTAP', 'PHM', 'ETSY', 'PTC', 'BRO', 'LNT', 'INCY', 'ESS', 'POOL', 'SNA', 'PKG', 'IP', 'WRB', 'TRMB', 'LDOS', 'SYF', 'AKAM', 'CTLT', 'STX', 'UDR', 'APA', 'DPZ', 'VTRS', 'TFX', 'KEY', 'NDSN', 'PEAK', 'CHRW', 'BF.B', 'BWA', 'HRL', 'SWK', 'TECH', 'EQT', 'WYNN', 'KIM', 'CPT', 'WDC', 'MTCH', 'CPB', 'NI', 'HST', 'JKHY', 'L', 'HSIC', 'MAS', 'PARA', 'JNPR', 'CDAY', 'CE', 'TPR', 'QRVO', 'FOXA', 'BIO', 'GL', 'EMN', 'CRL', 'TAP', 'LYV', 'GEN', 'KMX', 'CCL', 'CZR', 'ALLE', 'AAL', 'REG', 'PNR', 'AOS', 'PNW', 'BBWI', 'ROL', 'RHI', 'FFIV', 'HII', 'XRAY', 'UHS', 'NRG', 'BEN', 'WRK', 'BXP', 'IVZ', 'VFC', 'AAP', 'WHR', 'GNRC', 'FRT', 'SEE', 'NWSA', 'HAS', 'AIZ', 'CMA', 'OGN', 'DXC', 'NCLH', 'MHK', 'ALK', 'RL', 'ZION', 'NWL', 'DVA', 'FOX', 'LNC', 'FRC', 'DISH', 'NWS', 'MBC', 'SBNY', 'PENN', 'VNT', 'BMS', 'MXIM', 'WCG', 'HFC', 'TWTR', 'ABMD', 'SIVB', 'NKTR', 'IPGP', 'DWDP', 'Q', 'BHF', 'DRE', 'INFO', 'EVHC', 'ARNC', 'COTY', 'FBHS', 'AYI', 'UA', 'FL', 'CXO', 'CSRA', 'CMCSK', 'SIG', 'CPGX', 'BXLT', 'SLG', 'HBI', 'ENDP', 'LVLT', 'MNK', 'DISCK', 'AMG', 'XEC', 'NAVI', 'GMCR', 'ADS', 'FB', 'GGP', 'KORS', 'RIG', 'NLSN', 'KSU', 'MAC', 'PVH', 'DLPH', 'PETM', 'KRFT', 'ADT', 'ESV', 'ALXN', 'FOSL', 'WPX', 'TRIP', 'PRGO', 'GAS', 'CBE', 'ANR', 'COV', 'JOYG', 'CVC', 'NFX', 'TYC', 'QEP', 'CERN', 'HP', 'MJN', 'CLF', 'SAI', 'PCLN', 'ARG', 'FTI', 'OI', 'HRS', 'AKS', 'COG', 'MEE', 'LO', 'RRC', 'GME', 'JEC', 'TDC', 'TSO', 'LUK', 'KFT', 'ESRX', 'SBL', 'AYE', 'ABK', 'JDSU', 'CVG', 'YHOO', 'WLP', 'FSR', 'CPWR']
dj_all = ['UNH', 'GS', 'HD', 'MCD', 'MSFT', 'AMGN', 'V', 'CAT', 'BA', 'CRM', 'HON', 'TRV', 'CVX', 'AXP', 'AAPL', 'JNJ', 'PG', 'WMT', 'IBM', 'JPM', 'NKE', 'MRK', 'MMM', 'DIS', 'KO', 'DOW', 'CSCO', 'VZ', 'WBA', 'INTC', 'DD', 'MDLZ', 'BAC', 'PFE', 'AIG', 'T', 'C']
nasdaq_all = ['ATVI', 'ADBE', 'ADP', 'ABNB', 'ALGN', 'GOOGL', 'GOOG', 'AMZN', 'AMD', 'AEP', 'AMGN', 'ADI', 'ANSS', 'AAPL', 'AMAT', 'ASML', 'AZN', 'TEAM', 'ADSK', 'BKR', 'BIIB', 'BKNG', 'AVGO', 'CDNS', 'CHTR', 'CTAS', 'CSCO', 'CTSH', 'CMCSA', 'CEG', 'CPRT', 'CSGP', 'COST', 'CRWD', 'CSX', 'DDOG', 'DXCM', 'FANG', 'DLTR', 'EBAY', 'EA', 'ENPH', 'EXC', 'FAST', 'FISV', 'FTNT', 'GILD', 'GFS', 'HON', 'IDXX', 'ILMN', 'INTC', 'INTU', 'ISRG', 'JD', 'KDP', 'KLAC', 'KHC', 'LRCX', 'LCID', 'LULU', 'MAR', 'MRVL', 'MELI', 'META', 'MCHP', 'MU', 'MSFT', 'MRNA', 'MDLZ', 'MNST', 'NFLX', 'NVDA', 'NXPI', 'ORLY', 'ODFL', 'PCAR', 'PANW', 'PAYX', 'PYPL', 'PDD', 'PEP', 'QCOM', 'REGN', 'RIVN', 'ROST', 'SGEN', 'SIRI', 'SBUX', 'SNPS', 'TMUS', 'TSLA', 'TXN', 'VRSK', 'VRTX', 'WBA', 'WBD', 'WDAY', 'XEL', 'ZM', 'ZS', 'OKTA', 'MTCH', 'PTON', 'DOCU', 'CDW', 'SPLK', 'FOX', 'FOXA', 'NTAP', 'WLTW', 'VRSN', 'UAL', 'TTWO', 'WYNN', 'JBHT', 'LILA', 'LILAK', 'HOLX', 'HAS', 'LEXEA', 'SHPG', 'XRAY', 'BATRK', 'BATRA', 'LSXMK', 'LSXMA', 'NTES', 'EXPE', 'ENDP', 'NCLH', 'MXIM', 'TCOM', 'ULTA', 'INCY', 'SWKS', 'BMRN', 'TFCF', 'LBTYK', 'CMCSK', 'AAL', 'LVNTA', 'DISCK', 'FWONK', 'DISH', 'TSCO', 'TRIP', 'VEON', 'GMCR', 'FWONA', 'KRFT', 'DISCA', 'WDC', 'SBAC', 'LBTYA', 'EQIX', 'CTRX', 'FB', 'VIAB', 'FOSL', 'NUAN', 'GOLD', 'PRGO', 'ALXN', 'AKAM', 'WFM', 'FFIV', 'MYL', 'VOD', 'VMED', 'SNDK', 'QGEN', 'MAT', 'BMC', 'CERN', 'TFCFA', 'LIFE', 'PPDI', 'URBN', 'WCRX', 'FSLR', 'STX', 'FLIR', 'CA', 'DTV', 'SRCL', 'STLD', 'FMCN', 'BIDU', 'LEAP', 'HSIC', 'FWLT', 'CEPH', 'RYAAY', 'LOGI', 'LVLT', 'INFY', 'AEO', 'QRTEA', 'MICC', 'AMLN', 'JOY', 'CKFR', 'RHT', 'PTEN', 'NIHD', 'MWW', 'SEPR', 'CELG', 'XMSR', 'NTLI', 'MCIP', 'ERIC', 'SHLD', 'BB', 'ATYT', 'PRDO', 'ISIL', 'EXPD', 'CHRW', 'FHCC', 'PIXR', 'PETM', 'LAMR', 'GNTX', 'APCC', 'PDCO', 'TEVA', 'LNCR', 'SIAL', 'IMCL', 'ICOS', 'ESRX', 'CYTC', 'CDWC', 'PDLI', 'NLOK', 'IDTI', 'MCLDQ', 'RNWK', 'PALM', 'STCN', 'NOVL', 'COMS', 'BVSN', 'CNET', 'INKT', 'APOL', 'ADRX', 'NVLS', 'BRCD', 'HGSI', 'FLEX', 'EXDSQ', 'CHKP', 'BEAS', 'ABGX', 'MLNM', 'MERQE', 'BRCM', 'ARBA', 'JNPR', 'NSOL', 'PMCS', 'MEDI', 'LGTO', 'ITWOE', 'AMCC', 'ADLAE', 'SDLI', 'GMST', 'RFMD', 'QLGC', 'XOXO', 'VSTR', 'GX', 'CIEN', 'CNXT', 'LCOS', 'SEBL', 'FDLNB', 'EYE', 'AMFM', 'VIAV', 'ATHMQ', 'CMVT', 'SANM', 'VRTS', 'VTSS', 'COMR', 'NLI', 'AABA', 'IAC', 'Q', 'RXSD', 'CATP', 'AFM', 'AW', 'TECD', 'TRIN', 'JCOR', 'IMNX', 'DURA', 'CTXS']

# # Create the database
# create_database()

# # Store data for NASDAQ
# nasdaq_tickers = nasdaq_all
# store_data(nasdaq_tickers, 'nasdaq')

#@title To Delete a table
# delete_data('_data')

# Retrieve data for NASDAQ
# nasdaq_data = retrieve_data('nasdaq')

# nasdaq_data

# # Store data for S&P 500
# sp500_tickers = sp500_all
# store_data(sp500_tickers, 'sp500')

# Retrieve data for S&P 500
# sp500_data = retrieve_data('sp500')

# sp500_data

# # Store data for Dow Jones
# dowjones_tickers = dj_all
# store_data(dowjones_tickers, 'dowjones')

# Retrieve data for Dow Jones
# dowjones_data = retrieve_data('dowjones')

# dowjones_data
# top10_y_nasdaq, returns_Y_nasdaq = get_returns('Y', nasdaq_data, df_hist_nasdaq, current_conxt_nasdaq)
# top10_q_nasdaq, returns_Q_nasdaq = get_returns('Q', nasdaq_data, df_hist_nasdaq, current_conxt_nasdaq)
# top10_m_nasdaq, returns_M_nasdaq = get_returns('M', nasdaq_data, df_hist_nasdaq, current_conxt_nasdaq)

# top10_q_nasdaq

# plot_cumulative_returns(returns_Y_nasdaq, 'Y', 'NASDAQ')
# plot_cumulative_returns(returns_Q_nasdaq, 'Q', 'NASDAQ')
# plot_cumulative_returns(returns_M_nasdaq, 'M', 'NASDAQ')

# top10_y_sp500, returns_Y_sp500 = get_returns('Y', sp500_data, df_hist_sp500, current_conxt_sp500)
# top10_q_sp500, returns_Q_sp500 = get_returns('Q', sp500_data, df_hist_sp500, current_conxt_sp500)
# top10_m_sp500, returns_M_sp500 = get_returns('M', sp500_data, df_hist_sp500, current_conxt_sp500)

# top10_q_sp500

# plot_cumulative_returns(returns_Y_sp500, 'Y', 'SP500')
# plot_cumulative_returns(returns_Q_sp500, 'Q', 'SP500')
# plot_cumulative_returns(returns_M_sp500, 'M', 'SP500')

# top10_y_dj, returns_Y_dj = get_returns('Y', dowjones_data, df_hist_dj, current_conxt_dj)
# top10_q_dj, returns_Q_dj = get_returns('Q', dowjones_data, df_hist_dj, current_conxt_dj)
# top10_m_dj, returns_M_dj = get_returns('M', dowjones_data, df_hist_dj, current_conxt_dj)

# top10_q_dj

# plot_cumulative_returns(returns_Y_dj, 'Y', 'DOWjones')
# plot_cumulative_returns(returns_Q_dj, 'Q', 'DOWjones')
# plot_cumulative_returns(returns_M_dj, 'M', 'DOWjones')

def plot_index_returns():
    # Define the options for the user inputs
    tf = ['Yearly', 'Quarterly', 'Monthly']
    num_stocks_options = [5, 10]
    index_options = ['NASDAQ', 'SP500', 'DOWjones']

    # Get the user inputs using Streamlit widgets
    # Add date input widgets to get the start and end dates from the user
    start_date = st.date_input("Start date", value=pd.to_datetime('2010-01-01'), min_value=pd.to_datetime('1993-01-01'))
    end_date = st.date_input("End date", value=pd.to_datetime('2023-03-31'), max_value=pd.to_datetime('2023-03-31'))

    timeframe = st.sidebar.selectbox('Select timeframe', tf, index=0)
    num_stocks = st.sidebar.selectbox('Select number of top stocks', num_stocks_options, index=0)
    index = st.sidebar.selectbox('Select index', index_options, index=0)

    # Define the mapping dictionary
    timeframe_map = {'Yearly': 'Y', 'Quarterly': 'Q', 'Monthly': 'M'}
    index_map = {'NASDAQ': 'nasdaq', 'SP500': 'sp500', 'DOWjones': 'dowjones'}

    # Check if a value has been selected for timeframe before mapping
    if timeframe:
        timeframe = timeframe_map[timeframe]
    
    if index:
        index = index_map[index]

    # Define the button to trigger the calculation and plotting
    if st.sidebar.button('Calculate Returns and Plot Chart'):
        # Retrieve the relevant data for the selected index
        if index == 'nasdaq':
            nasdaq_data = retrieve_data(index, start_date, end_date)
            index_data = nasdaq_data
            hist_data = df_hist_nasdaq
            current_context = current_conxt_nasdaq
            top_stocks, returns = get_returns(timeframe, index_data, hist_data, current_context, num_stocks)
            st.header("Top Stocks and Returns")
            st.write(top_stocks)
        elif index == 'sp500':
            sp500_data = retrieve_data(index, start_date, end_date)
            index_data = sp500_data
            hist_data = df_hist_sp500
            current_context = current_conxt_sp500
            top_stocks, returns = get_returns(timeframe, index_data, hist_data, current_context, num_stocks)
            st.header("Top Stocks and Returns")
            st.write(top_stocks)
        elif index == 'dowjones':
            dowjones_data = retrieve_data(index, start_date, end_date)
            index_data = dowjones_data
            hist_data = df_hist_dj
            current_context = current_conxt_dj
            top_stocks, returns = get_returns(timeframe, index_data, hist_data, current_context, num_stocks)
            st.header("Top Stocks and Returns")
            st.write(top_stocks)

        # Display the chart
        plot_cumulative_returns(returns, timeframe[0], index)
        

    
    
# Call the function to run the app
plot_index_returns()
